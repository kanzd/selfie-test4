{"version":3,"sources":["redux/slice.js","compoo/compo.js","compoo/compo2.js","compoo/vid.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","Compo","props","count","useSelector","ss","dispatch","useDispatch","onClick","e","to","Index","useEffect","navigator","mediaDevices","getUserMedia","audio","video","width","then","stream","window","streamTracks","document","querySelector","srcObject","setAttribute","play","addEventListener","successHandler","catch","error","console","log","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","counter","ReactDOM","render","StrictMode","getElementById"],"mappings":"gMAMaA,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAa,CACXC,MAAO,GAETC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMH,OAAS,GAEjBI,UAAW,SAACD,GACVA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,YAMrB,EAAoDX,EAAaY,QAAzDN,EAAR,EAAQA,UAEAN,GAFR,EAAmBQ,UAAnB,EAA8BC,kBAEtBT,EAAf,S,OC1Be,SAASa,EAAMC,GAC1B,IAAMC,EAAQC,aAAY,SAACT,GAAD,OAAWA,EAAMU,GAAGb,SACxCc,EAAWC,cACjB,OAAQ,qCACR,sCACCJ,EACD,wBAAQK,QAAS,SAACC,GACdH,EAASZ,MADb,gBAGA,cAAC,IAAD,CAAMgB,GAAI,OAAV,mBCTW,SAAST,EAAMC,GAC1B,IAAMC,EAAQC,aAAY,SAACT,GAAD,OAAWA,EAAMU,GAAGb,SACxCc,EAAWC,cACjB,OAAQ,qCACR,sCACCJ,EACD,wBAAQK,QAAS,SAACC,GACdH,EAASZ,MADb,gBAGA,cAAC,IAAD,CAAMgB,GAAI,OAAV,mBCZW,SAASC,IAyBtB,OALEC,qBAAU,WAAK,IAAD,IACD,QAAT,EAAAC,iBAAA,mBAAWC,oBAAX,SAAyBC,aAAa,CAAEC,OAAO,EAAOC,MAAO,CAAEC,MAAO,QACrEC,MAAK,SAAAC,GAAM,OArBO,SAACA,GAEpBC,OAAQC,aAAeF,EACvB,IAAMH,EAAQM,SAASC,cAAc,SACjCP,IACFA,EAAMQ,UAAYL,EAClBH,EAAMS,aAAa,WAAY,IAC/BT,EAAMS,aAAa,QAAS,IAC5BT,EAAMS,aAAa,cAAe,IAClCT,EAAMU,OACNV,EAAMW,iBAAiB,kBAAkB,SAACnB,QAW5BoB,CAAeT,MAC9BU,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC9B,IAEF,8BAEJ,2CCReG,MAlBf,WACE,OACE,mCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,OAAlB,SACA,cAAC,EAAD,MAEA,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,IAAlB,SACA,cAAC,EAAD,MAEA,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,OAAlB,SACA,cAAC,EAAD,YCHOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCLDO,EAAQC,YAAe,CAChCC,QAAS,CACT1C,GAAG2C,KCIPC,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACA,cAAC,EAAD,QAIAtB,SAAS6B,eAAe,SAM1Bf,M","file":"static/js/main.a1763953.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\n// const initialState = {\r\n//   value: 0,\r\n// }\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState:{\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { decrement, increment } from '../redux/slice';\r\n\r\nexport default function Compo(props){\r\n    const count = useSelector((state) => state.ss.value);\r\n    const dispatch = useDispatch()\r\n    return (<>\r\n    <div>one</div>\r\n    {count}\r\n    <button onClick={(e)=>{\r\n        dispatch(increment());\r\n    }}>go</button>\r\n    <Link to =\"/two\">go</Link>\r\n    </>)\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { decrement, increment } from '../redux/slice';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Compo(props){\r\n    const count = useSelector((state) => state.ss.value);\r\n    const dispatch = useDispatch()\r\n    return (<>\r\n    <div>two</div>\r\n    {count}\r\n    <button onClick={(e)=>{\r\n        dispatch(increment());\r\n    }}>go</button>\r\n    <Link to =\"/one\">go</Link>\r\n    </>)\r\n}","import React, { useEffect } from 'react'\r\n\r\nexport default function Index() {\r\n    const successHandler = (stream) => {\r\n    \r\n        window .streamTracks = stream;\r\n        const video = document.querySelector('video');\r\n        if (video) {\r\n          video.srcObject = stream;\r\n          video.setAttribute('autoplay', '');\r\n          video.setAttribute('muted', '');\r\n          video.setAttribute('playsinline', '') // required to tell iOS safari we don't want fullscreen\r\n          video.play();\r\n          video.addEventListener('loadedmetadata', (e) => {\r\n           \r\n          });\r\n        \r\n        } else {\r\n       \r\n        }\r\n     \r\n      }\r\n    useEffect(()=>{\r\n        navigator?.mediaDevices?.getUserMedia({ audio: false, video: { width: 1500} })\r\n        .then(stream => successHandler(stream))\r\n        .catch(error => console.log(error));\r\n    },[])\r\n  return (\r\n    <div>\r\n\r\n<video >\r\nsome\r\n    </video>\r\n    </div>\r\n  )\r\n}\r\n","import { BrowserRouter, Route, Link } from \"react-router-dom\";\r\nimport Com1 from \"./compoo/compo\";\r\nimport Com2 from \"./compoo/compo2\";\r\nimport Vid from \"./compoo/vid\";\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <BrowserRouter>\r\n        <Route exact path=\"/one\">\r\n        <Com1></Com1>\r\n        </Route>\r\n        <Route exact path=\"/\">\r\n        <Vid></Vid>\r\n        </Route>\r\n        <Route exact path=\"/two\">\r\n        <Com2></Com2>\r\n        </Route>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport counter from \"./slice\";\r\nexport const store = configureStore({  \r\n    reducer: {\r\n    ss:counter,\r\n},})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store } from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  <Provider store={store}>\r\n  <App />\r\n  </Provider>\r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}